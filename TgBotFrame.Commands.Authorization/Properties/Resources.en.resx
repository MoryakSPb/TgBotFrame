<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Category_Name_Roles" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="RoleManagementController_Add_NotFound" xml:space="preserve">
    <value>Role "{0}" is not exist</value>
  </data>
  <data name="AuthorizationMiddleware_Denied" xml:space="preserve">
    <value>Command execution denied, you do not have the required roles</value>
  </data>
  <data name="Category_Description_Roles" xml:space="preserve">
    <value>These commands allow you to manage roles and perform certain actions with their members, such as mentioning them</value>
  </data>
  <data name="MentionController_Mention" xml:space="preserve">
    <value>, your role is mentioned</value>
  </data>
  <data name="MentionController_Mention_EditResult" xml:space="preserve">
    <value>The ability to mention role {0} is</value>
  </data>
  <data name="MentionController_Mention_ListTitle" xml:space="preserve">
    <value>Ability to mention role members:</value>
  </data>
  <data name="MentionController_Mention_NotFound" xml:space="preserve">
    <value>The role does not exist or has no members</value>
  </data>
  <data name="RoleManagementController_Add_Success" xml:space="preserve">
    <value>User {0} has been assigned the role "{1}"</value>
  </data>
  <data name="RoleManagementController_Remove_NotFound" xml:space="preserve">
    <value>User {0} is not assigned the role "{1}" or role does not exist</value>
  </data>
  <data name="RoleManagementController_Remove_Success" xml:space="preserve">
    <value>User {0} no longer has role "{1}"</value>
  </data>
  <data name="BanController_Ban_Result" xml:space="preserve">
    <value>User @{0} has been banned until {1:F}</value>
  </data>
  <data name="BanController_UnBan_Result" xml:space="preserve">
    <value>User {0} has been unbanned</value>
  </data>
  <data name="BanController_BanInfo_NotFound" xml:space="preserve">
    <value>This user has no bans</value>
  </data>
  <data name="BanController_BanInfo_Until" xml:space="preserve">
    <value>Until </value>
  </data>
  <data name="BanController_BanInfo_Infinite" xml:space="preserve">
    <value>Forever</value>
  </data>
  <data name="Category_Name_Ban" xml:space="preserve">
    <value>Bans</value>
  </data>
  <data name="Category_Description_Ban" xml:space="preserve">
    <value>These commands allow you to manage user bans</value>
  </data>
  <data name="MentionController_Mention_Off" xml:space="preserve">
    <value> **disable** </value>
  </data>
  <data name="MentionController_Mention_OffShort" xml:space="preserve">
    <value> *OFF* </value>
  </data>
  <data name="MentionController_Mention_On" xml:space="preserve">
    <value> **enabled** </value>
  </data>
  <data name="MentionController_Mention_OnShort" xml:space="preserve">
    <value> **ON** </value>
  </data>
  <data name="Command_Description_UnBan" xml:space="preserve">
    <value>Prematurely removes ban from the user whose ID was specified</value>
  </data>
  <data name="Command_Description_BanInfo" xml:space="preserve">
    <value>Replies with a list of blocked users. By specifying the user ID as an integer parameter, the bot responds with blocking details</value>
  </data>
  <data name="Command_Description_Ban" xml:space="preserve">
    <value>Blocks a user inside the bot, preventing them from executing commands. The various command options assume that the integer is the user ID, the duration is the blocking time, and the text is a description of the blocking reason for administrators. If the blocking time is not specified, the blocking is assumed to be permanent.</value>
  </data>
  <data name="Command_Description_AddRole" xml:space="preserve">
    <value>Assigns a user to the specified role.
Specify the role name first, then the user ID.</value>
  </data>
  <data name="Command_Description_Mention" xml:space="preserve">
    <value>Specify the role name as the first argument to mention all members of the role. Calling the command without arguments will cause the bot to respond with a list of roles whose members can be mentioned. Calling the command with two arguments allows bot administrators to control whether a role can be mentioned. The first argument is the role name, and the second is the flag for whether a role can be mentioned.</value>
  </data>
  <data name="Command_Description_RemoveRole" xml:space="preserve">
    <value>Removes a user from membership in a role.
Specify the role name first, then the user ID.</value>
  </data>
</root>