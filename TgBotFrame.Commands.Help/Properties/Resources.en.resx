<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BoolFormat" xml:space="preserve">
    <value>true\false</value>
  </data>
  <data name="BoolName" xml:space="preserve">
    <value>boolean</value>
  </data>
  <data name="CharFormat" xml:space="preserve">
    <value>A</value>
  </data>
  <data name="CharName" xml:space="preserve">
    <value>character</value>
  </data>
  <data name="DateFormat" xml:space="preserve">
    <value>12/24/2000</value>
  </data>
  <data name="DateName" xml:space="preserve">
    <value>date</value>
  </data>
  <data name="DateTimeFormat" xml:space="preserve">
    <value>2000-12-24T12:30</value>
  </data>
  <data name="DateTimeName" xml:space="preserve">
    <value>date &amp; time</value>
  </data>
  <data name="DurationFormat" xml:space="preserve">
    <value>05:30:00</value>
  </data>
  <data name="DurationName" xml:space="preserve">
    <value>duration</value>
  </data>
  <data name="FloatFormat" xml:space="preserve">
    <value>1.25</value>
  </data>
  <data name="FloatName" xml:space="preserve">
    <value>fractional</value>
  </data>
  <data name="HelpTitle" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="IntFormat" xml:space="preserve">
    <value>123</value>
  </data>
  <data name="IntName" xml:space="preserve">
    <value>integer</value>
  </data>
  <data name="MentionFormat" xml:space="preserve">
    <value>@example</value>
  </data>
  <data name="MentionName" xml:space="preserve">
    <value>menition</value>
  </data>
  <data name="TextFormat" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TextName" xml:space="preserve">
    <value>text</value>
  </data>
  <data name="TimeFormat" xml:space="preserve">
    <value>15:30</value>
  </data>
  <data name="TimeName" xml:space="preserve">
    <value>time</value>
  </data>
  <data name="Help_Description" xml:space="preserve">
    <value>Displays help for commands</value>
  </data>
  <data name="Help_Button_Syntax" xml:space="preserve">
    <value>Arguments format</value>
  </data>
  <data name="Help_Button_List" xml:space="preserve">
    <value>Commands</value>
  </data>
  <data name="HelpCommandController_HelpList_WithoutCategory" xml:space="preserve">
    <value>(no category)</value>
  </data>
  <data name="HelpCommandController_HelpCategory_NoCategory" xml:space="preserve">
    <value>Here are the commands that are not included in any of the categories</value>
  </data>
  <data name="HelpCommandController_HelpCategory_NotFound" xml:space="preserve">
    <value>Category not found</value>
  </data>
  <data name="HelpCommandController_HelpCommand_NotFound" xml:space="preserve">
    <value>Command not found</value>
  </data>
  <data name="HelpCommandController_HelpCommand_Overloads" xml:space="preserve">
    <value>Variants:</value>
  </data>
  <data name="HelpCommandController_HelpList_Description" xml:space="preserve">
    <value>Select a command category</value>
  </data>
  <data name="HelpCommandController_HelpList_Title" xml:space="preserve">
    <value>Available command categories:</value>
  </data>
  <data name="HelpCommandController_Help_Title" xml:space="preserve">
    <value>Welcome to the help menu. Select the necessary menu item:</value>
  </data>
  <data name="Command_Description_HelpSyntax" xml:space="preserve">
    <value>Displays help on command syntax</value>
  </data>
  <data name="Command_Description_HelpList" xml:space="preserve">
    <value>Lists command categories</value>
  </data>
  <data name="Command_Description_HelpCommand" xml:space="preserve">
    <value>Displays help for a command</value>
  </data>
  <data name="Command_Description_HelpCategory" xml:space="preserve">
    <value>Lists commands from the specified category</value>
  </data>
  <data name="Command_Description_Help" xml:space="preserve">
    <value>Displays the main help menu</value>
  </data>
  <data name="CmdTitle" xml:space="preserve">
    <value>Commands</value>
  </data>
  <data name="Category_Name_Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Category_Description_Help" xml:space="preserve">
    <value>This category contains help commands. Most of these commands can be used without entering them manually, using the menu buttons from the help command</value>
  </data>
  <data name="HelpCommandController_HelpSyntax_Title" xml:space="preserve">
    <value>Bot commands accept two types of values: commands and arguments\.
A command is an identifier of a specific action that the bot should perform\. Command identifiers are case\-insensitive: you can use both lowercase and uppercase letters\.
Parameters are the data required to perform an action\.

Any command begins with the `/` symbol; immediately after the symbol comes the
command identifier\.
Parameters are separated from each other and the command identifier by spaces\.
For example: the bot will respond to the message `/HelpCommand Help` with help on the `Help` command\.

Argument formats:

\- Boolean: `true` or `false` values;
\- Integer: a whole decimal number, such as `123`;
\- Fractional: a fractional number, the fractional part can be separated from the whole by `\.` or `,`;
\- String: a set of characters, if you need to include problems in it, you can put the string in quotes;
\- Duration: a length of time in the form `HH:MM:SS` or `HH:MM`, you can also enter an integer number of days;
\- Date: a date in the format `MM\/DD\/YYYY` or `YYYY\-MM\-DD`;
\- Time: time in the format `HH:MM:SS` or `HH:MM`\.</value>
  </data>
</root>